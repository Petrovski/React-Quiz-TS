{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNumber","totalQuestions","category","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","isCorrect","setIsCorrect","isIncorrect","setIsIncorrect","startQuiz","EASY","newQuestions","length","undefined","event","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wHAaYA,E,wFAAAA,K,YAAAA,E,gBAAAA,E,aAAAA,M,KAML,I,QAAMC,EAAkB,uCAAG,WAChCC,EACAC,GAFgC,iBAAAC,EAAA,6DAI1BC,EAJ0B,6CAIuBH,EAJvB,uBAI4CC,EAJ5C,2BAKNG,MAAMD,GALA,8BAKWE,OALX,cAK1BC,EAL0B,yBAMzBA,EAAKC,QAAQC,KAAI,SAACC,GAAD,mBAAC,eACpBA,GADmB,IAEtBC,SC3ByBC,ED2BH,GAAD,mBAChBF,EAASG,mBADO,CAEnBH,EAASI,iBC5Bb,YAAIF,GAAOG,MAAK,kBAAMC,KAAKC,SAAW,SADZ,IAACL,MDmBK,2CAAH,wD,cEjBlBM,EAAUC,IAAOC,IAAV,iZA0BPC,EAAgBF,IAAOC,IAAV,6aAUR,gBAAGE,EAAH,EAAGA,QAASC,EAAZ,EAAYA,YAAZ,OACZD,EACI,4CACCA,GAAWC,EACZ,2CACA,8C,OCNKC,EAvBuB,SAAC,GAAD,IAAGd,EAAH,EAAGA,SAAUC,EAAb,EAAaA,QAASc,EAAtB,EAAsBA,SAAUC,EAAhC,EAAgCA,WAAYC,EAA5C,EAA4CA,eAAgBC,EAA5D,EAA4DA,eAAgBC,EAA5E,EAA4EA,SAA5E,OAClC,eAACX,EAAD,WACE,oBAAGY,UAAU,SAAb,uBACY,mCAASH,EAAT,MAA4BC,QAExC,oBAAGE,UAAU,WAAb,uBAAkC,iCAASD,OAC3C,mBAAGE,wBAAyB,CAAEC,OAAQtB,KACnCC,EAAQF,KAAI,SAACwB,GACZ,OACE,cAACZ,EAAD,CAEEC,SAAmB,OAAVI,QAAU,IAAVA,OAAA,EAAAA,EAAYQ,iBAAkBD,EACvCV,aAAuB,OAAVG,QAAU,IAAVA,OAAA,EAAAA,EAAYO,UAAWA,EAHtC,SAKA,wBAAQE,WAAUT,EAA2BU,MAAOH,EAAQI,QAASZ,EAArE,SACE,+BAAOQ,OALFA,UCtBNK,EAAcC,YAAH,oRAmBXrB,EAAUC,IAAOC,IAAV,ksDC2FLoB,MA7Ff,WACE,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,mBAA0B,IAA5D,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA4BJ,mBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAsCN,mBAAyB,IAA/D,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAA0BR,mBAAS,GAAnC,mBAAOS,EAAP,KAAcC,EAAd,KACA,EAAgCV,oBAAS,GAAzC,mBAAOW,EAAP,KAAiBC,EAAjB,KACA,EAAkCZ,oBAAS,GAA3C,mBAAOa,EAAP,KAAkBC,EAAlB,KACA,EAAsCd,oBAAS,GAA/C,mBAAOe,EAAP,KAAoBC,EAApB,KAEMC,EAAS,uCAAG,4BAAAvD,EAAA,6DAChBwC,GAAW,GACXU,GAAY,GAFI,SAGWrD,EAfP,GAiBlBD,EAAW4D,MALG,OAGVC,EAHU,OAOhBf,EAAae,GACbT,EAAS,GACTF,EAAe,IACfF,EAAU,GACVJ,GAAW,GAXK,4CAAH,qDAkDf,OACE,qCACA,cAACL,EAAD,IACA,cAAC,EAAD,UACE,sBAAKR,UAAU,MAAf,UACE,uDACCsB,GApEe,KAoEHJ,EAAYa,OACzB,wBAAQ/B,UAAU,YAAYO,QAASqB,EAAvC,wBACI,KACFN,EAAsE,KAA3D,oBAAGtB,UAAU,QAAb,oBAA4B,iCAASoB,OACjDR,GAAW,mBAAGZ,UAAU,UAAb,kCACXwB,EAAY,mBAAGxB,UAAU,UAAb,sBAAsC,KAClD0B,EAAc,mBAAG1B,UAAU,YAAb,uBAAyC,MACtDY,IAAYU,GACZ,cAAC,EAAD,CACEzB,eAAgBmB,EAAS,EACzBlB,eA9EY,GA+EZlB,SAAUkC,EAAUE,GAAQpC,SAC5BC,QAASiC,EAAUE,GAAQnC,QAC3Be,WAAYsB,EAAcA,EAAYF,QAAUgB,EAChDrC,SAxDU,SAACsC,GACnB,IAAKX,EAAU,CAEb,IAAMnB,EAAS8B,EAAMC,cAAc5B,MAE7Bd,EAAUsB,EAAUE,GAAQhC,iBAAmBmB,EAEjDX,GACF6B,GAAS,SAAAc,GAAI,OAAIA,EAAO,KACxBV,GAAa,IAEbE,GAAe,GAGjB,IAAMS,EAAe,CACnBxD,SAAUkC,EAAUE,GAAQpC,SAC5BuB,SACAX,UACAY,cAAeU,EAAUE,GAAQhC,gBAEnCmC,GAAe,SAAAgB,GAAI,4BAAQA,GAAR,CAAcC,SAqC3BrC,SAAUe,EAAUE,GAAQjB,WAG9Ba,GAAYU,GAAYJ,EAAYa,SAAWf,EAAS,GAAgBqB,IAAXrB,EAE5D,KADC,wBAAQhB,UAAU,oBAAoBO,QArC3B,WAEnBkB,GAAa,GACbE,GAAe,GACf,IAAMW,EAAetB,EAAS,EAtDV,KAuDhBsB,EACFf,GAAY,GAEZN,EAAUqB,IA6BJ,oCCpGZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d90a27e7.chunk.js","sourcesContent":["import { shuffleArray } from './utils';\r\n\r\nexport interface Question {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport enum Difficulty {\r\n  EASY = 'easy',\r\n  MEDIUM = 'medium',\r\n  HARD = 'hard',\r\n}\r\n\r\nexport const fetchQuizQuestions = async (\r\n  amount: number,\r\n  difficulty: Difficulty\r\n) => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([\r\n      ...question.incorrect_answers,\r\n      question.correct_answer,\r\n    ]),\r\n  }));\r\n};\r\n","export const shuffleArray = (array: any[]) =>\r\n  [...array].sort(() => Math.random() - 0.5);\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  min-width: 500px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n\r\n  p {\r\n    font-size: 1.2rem;\r\n  }\r\n\r\n  @media only screen and (max-width: 750px) {\r\n    max-width: 600px;\r\n    min-width: 350px;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  button {\r\n    transition: all 0.3s ease;\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 1.2em;\r\n    min-width: 250px;\r\n    color: white;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\r\n        : !correct && userClicked\r\n        ? 'linear-gradient(90deg, #ff5656, #c16868)'\r\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\r\n    border: 3px solid white;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    &:hover {\r\n      box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { AnswerObject } from '../App';\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\r\n\r\nexport interface Props {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNumber: number;\r\n  totalQuestions: number;\r\n  category: string;\r\n};\r\n\r\nconst QuestionCard: React.FC<Props> = ({ question, answers, callback, userAnswer, questionNumber, totalQuestions, category }) => (\r\n    <Wrapper>\r\n      <p className=\"number\">\r\n        Question: <strong>{questionNumber} / {totalQuestions}</strong>\r\n      </p>\r\n      <p className=\"category\">Category: <strong>{category}</strong></p>\r\n      <p dangerouslySetInnerHTML={{ __html: question }}></p>\r\n        {answers.map((answer) => {\r\n          return (\r\n            <ButtonWrapper\r\n              key={answer}\r\n              correct={userAnswer?.correctAnswer === answer}\r\n              userClicked={userAnswer?.answer === answer}\r\n            >\r\n            <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\r\n              <span>{answer}</span>\r\n            </button>\r\n          </ButtonWrapper>\r\n          )\r\n        })}\r\n    </Wrapper>\r\n)\r\n\r\nexport default QuestionCard;","import styled, { createGlobalStyle } from 'styled-components';\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    height: 100%\r\n  }\r\n\r\n  body {\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n\r\n  * {\r\n    box-sizing: border-box;\r\n    font-family: 'Lato', sans-serif;\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  p {\r\n    font-size: 1.5rem;\r\n  }\r\n\r\n  .score {\r\n    font-size: 2rem;\r\n    text-align: center;\r\n  }\r\n\r\n  h1 {\r\n    font-size: 3rem;\r\n    text-align: center;\r\n  }\r\n\r\n  .correct,\r\n  .incorrect {\r\n    position: absolute;\r\n    margin-left: auto;\r\n    margin-right: auto;\r\n    left: 0;\r\n    right: 0;\r\n    text-align: center;\r\n    margin-top: 5px;\r\n    font-size: 1.3rem;\r\n  }\r\n\r\n  .correct {\r\n    color: green;\r\n  }\r\n\r\n  .incorrect {\r\n    color: red;\r\n  }\r\n\r\n  @media only screen and (max-width: 750px) {\r\n    h1 {\r\n      font-size: 2rem;\r\n    }\r\n\r\n    p {\r\n      font-size: 1rem;\r\n    }\r\n\r\n    .score {\r\n      font-size: 1.5rem;\r\n    }\r\n  }\r\n\r\n  .start-btn,\r\n  .next-question-btn {\r\n    cursor: pointer;\r\n    display: block;\r\n    margin: 0 auto;\r\n    padding: 0.75rem 1.25rem;\r\n    border-radius: 0.8rem;\r\n    text-transform: uppercase;\r\n    font-size: 1rem;\r\n    letter-spacing: 0.1rem;\r\n    transition: all 0.3s;\r\n    position: relative;\r\n    overflow: hidden;\r\n    z-index: 1;\r\n    &:after {\r\n      content: '';\r\n      position: absolute;\r\n      bottom: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n      background-color: rgb(150, 200, 150);\r\n      z-index: -2;\r\n    }\r\n    &:before {\r\n      content: '';\r\n      position: absolute;\r\n      bottom: 0;\r\n      left: 0;\r\n      width: 0%;\r\n      height: 100%;\r\n      background-color: darkgreen;\r\n      transition: all 0.3s;\r\n      z-index: -1;\r\n    }\r\n    &:hover {\r\n      color: #fff;\r\n      &:before {\r\n        width: 100%;\r\n      }\r\n    }\r\n  }\r\n\r\n  .start-btn {\r\n    max-width: 200px;\r\n  }\r\n\r\n  .next-question-btn {\r\n    display: block;\r\n    margin: 0 auto;\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './API';\n\n// Components\nimport QuestionCard from './components/QuestionCard';\n// Types\nimport { QuestionState, Difficulty } from './API';\n// Styles\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport interface AnswerObject {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n  const [isCorrect, setIsCorrect] = useState(false);\n  const [isIncorrect, setIsIncorrect] = useState(false);\n\n  const startQuiz = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY,\n    );\n    setQuestions(newQuestions)\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  }\n\n  const checkAnswer = (event: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // Users answer\n      const answer = event.currentTarget.value;\n      // Check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // Add score if answer is correct\n      if (correct) {\n        setScore(prev => prev + 1);\n        setIsCorrect(true);\n      } else {\n        setIsIncorrect(true);\n      }\n      // Save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      }\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n  }\n\n  const nextQuestion = () => {\n    // Move on to the next question if not the last question\n    setIsCorrect(false);\n    setIsIncorrect(false);\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  }\n\n  return (\n    <>\n    <GlobalStyle />\n    <Wrapper>\n      <div className=\"App\">\n        <h1>React TypeScript Quiz</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n        <button className=\"start-btn\" onClick={startQuiz}>Start Quiz</button>\n        ) : null}\n        {!gameOver ? <p className=\"score\">Score: <strong>{score}</strong></p> : null}\n        {loading && <p className=\"loading\">Loading Questions...</p>}\n        {isCorrect ? <p className=\"correct\">Correct!</p> : null}\n        {isIncorrect ? <p className=\"incorrect\">Inorrect!</p> : null}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNumber={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n            category={questions[number].category}\n          />\n        )}\n        {!loading && !gameOver && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (\n            <button className=\"next-question-btn\" onClick={nextQuestion}>Next Question</button>\n        ): null}\n      </div>\n    </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}